{"ast":null,"code":"var _jsxFileName = \"/home/dennis/Desktop/MORINGA/phase 2/Phase-2-CODE-CHALLENGE-2A/bot/src/components/App.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React, { useState, useEffect } from 'react';\nimport YourBotArmy from './YourBotArmy';\nimport BotCollection from './BotCollection';\nimport SortBar from './SortBar';\nimport BotSpecs from './BotSpecs';\nimport FilterBar from './FilterBar'; // Import the FilterBar component\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [data, setData] = useState([]);\n  const [enlistedBots, setEnlistedBots] = useState([]);\n  const [showBotSpecs, setShowBotSpecs] = useState(false);\n  const [selectedBot, setSelectedBot] = useState(null);\n  const [filteredData, setFilteredData] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:8001/bots').then(response => response.json()).then(data => {\n      setData(data);\n      setFilteredData(data); // Initialize filteredData with all the data\n    }).catch(error => console.error('Error fetching bots:', error));\n  }, []);\n  const handleEnlist = bot => {\n    setEnlistedBots(prevEnlistedBots => [...prevEnlistedBots, bot]);\n  };\n  const handleRemove = botId => {\n    setEnlistedBots(prevEnlistedBots => prevEnlistedBots.filter(bot => bot.id !== botId));\n  };\n  const handleShowBotSpecs = bot => {\n    setSelectedBot(bot);\n    setShowBotSpecs(true);\n  };\n  const handleHideBotSpecs = () => {\n    setShowBotSpecs(false);\n  };\n\n  // Define a function to discharge a bot\n  const handleDischarge = botId => {\n    // Remove the bot from the enlistedBots state\n    setEnlistedBots(prevEnlistedBots => prevEnlistedBots.filter(bot => bot.id !== botId));\n\n    // Remove the bot from the backend using fetch with DELETE method\n    fetch(`http://localhost:8001/bots/${botId}`, {\n      method: 'DELETE'\n    }).then(response => response.json()).then(data => console.log('Bot discharged:', data)).catch(error => console.error('Error discharging bot:', error));\n  };\n\n  // Function to filter data based on selected classes\n  const applyFilters = selectedClasses => {\n    if (selectedClasses.length === 0) {\n      setFilteredData(data); // No filters selected, show all data\n    } else {\n      setFilteredData(data.filter(bot => selectedClasses.includes(bot.bot_class)));\n    }\n  };\n  useEffect(() => {\n    applyFilters([]); // Initial data, no filters\n  }, [data]);\n\n  // Function to sort filteredData\n  const handleSort = property => {\n    const sortedData = [...filteredData].sort((a, b) => {\n      if (typeof a[property] === 'number' && typeof b[property] === 'number') {\n        // If both values are numbers, sort numerically\n        return a[property] - b[property];\n      } else if (typeof a[property] === 'string' && typeof b[property] === 'string') {\n        // If both values are strings, sort alphabetically\n        return a[property].localeCompare(b[property]);\n      } else {\n        // For other types (e.g., booleans), maintain the original order\n        return 0;\n      }\n    });\n    setFilteredData(sortedData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome to Bot Battlr\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), !showBotSpecs && /*#__PURE__*/_jsxDEV(SortBar, {\n      onSort: handleSort\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(FilterBar, {\n      setFilters: applyFilters\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(YourBotArmy, {\n      enlistedBots: enlistedBots,\n      onDelete: handleRemove,\n      onDischarge: handleDischarge // Pass the handleDischarge function as a prop\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), showBotSpecs ? /*#__PURE__*/_jsxDEV(BotSpecs, {\n      bot: selectedBot,\n      onEnlist: handleEnlist,\n      onBack: handleHideBotSpecs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(BotCollection, {\n      data: filteredData // Use the filteredData instead of the original data\n      ,\n      enlistedBots: enlistedBots,\n      onEnlist: handleEnlist,\n      onRemove: handleRemove,\n      onShowSpecs: handleShowBotSpecs,\n      onDischarge: handleDischarge // Pass the handleDischarge function as a prop\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Ky1/L9jdyos8FSw97uyYI1umDA0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","YourBotArmy","BotCollection","SortBar","BotSpecs","FilterBar","jsxDEV","_jsxDEV","App","_s","data","setData","enlistedBots","setEnlistedBots","showBotSpecs","setShowBotSpecs","selectedBot","setSelectedBot","filteredData","setFilteredData","fetch","then","response","json","catch","error","console","handleEnlist","bot","prevEnlistedBots","handleRemove","botId","filter","id","handleShowBotSpecs","handleHideBotSpecs","handleDischarge","method","log","applyFilters","selectedClasses","length","includes","bot_class","handleSort","property","sortedData","sort","a","b","localeCompare","children","fileName","_jsxFileName","lineNumber","columnNumber","onSort","setFilters","onDelete","onDischarge","onEnlist","onBack","onRemove","onShowSpecs","_c","$RefreshReg$"],"sources":["/home/dennis/Desktop/MORINGA/phase 2/Phase-2-CODE-CHALLENGE-2A/bot/src/components/App.js"],"sourcesContent":["// App.js\nimport React, { useState, useEffect } from 'react';\nimport YourBotArmy from './YourBotArmy';\nimport BotCollection from './BotCollection';\nimport SortBar from './SortBar';\nimport BotSpecs from './BotSpecs';\nimport FilterBar from './FilterBar'; // Import the FilterBar component\nimport './App.css';\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [enlistedBots, setEnlistedBots] = useState([]);\n  const [showBotSpecs, setShowBotSpecs] = useState(false);\n  const [selectedBot, setSelectedBot] = useState(null);\n  const [filteredData, setFilteredData] = useState([]);\n\n  useEffect(() => {\n    fetch('http://localhost:8001/bots')\n      .then((response) => response.json())\n      .then((data) => {\n        setData(data);\n        setFilteredData(data); // Initialize filteredData with all the data\n      })\n      .catch((error) => console.error('Error fetching bots:', error));\n  }, []);\n\n  const handleEnlist = (bot) => {\n    setEnlistedBots((prevEnlistedBots) => [...prevEnlistedBots, bot]);\n  };\n\n  const handleRemove = (botId) => {\n    setEnlistedBots((prevEnlistedBots) =>\n      prevEnlistedBots.filter((bot) => bot.id !== botId)\n    );\n  };\n\n  const handleShowBotSpecs = (bot) => {\n    setSelectedBot(bot);\n    setShowBotSpecs(true);\n  };\n\n  const handleHideBotSpecs = () => {\n    setShowBotSpecs(false);\n  };\n\n  // Define a function to discharge a bot\n  const handleDischarge = (botId) => {\n    // Remove the bot from the enlistedBots state\n    setEnlistedBots((prevEnlistedBots) =>\n      prevEnlistedBots.filter((bot) => bot.id !== botId)\n    );\n\n    // Remove the bot from the backend using fetch with DELETE method\n    fetch(`http://localhost:8001/bots/${botId}`, {\n      method: 'DELETE',\n    })\n      .then((response) => response.json())\n      .then((data) => console.log('Bot discharged:', data))\n      .catch((error) => console.error('Error discharging bot:', error));\n  };\n\n  // Function to filter data based on selected classes\n  const applyFilters = (selectedClasses) => {\n    if (selectedClasses.length === 0) {\n      setFilteredData(data); // No filters selected, show all data\n    } else {\n      setFilteredData(\n        data.filter((bot) => selectedClasses.includes(bot.bot_class))\n      );\n    }\n  };\n\n  useEffect(() => {\n    applyFilters([]); // Initial data, no filters\n  }, [data]);\n\n  // Function to sort filteredData\n  const handleSort = (property) => {\n    const sortedData = [...filteredData].sort((a, b) => {\n      if (typeof a[property] === 'number' && typeof b[property] === 'number') {\n        // If both values are numbers, sort numerically\n        return a[property] - b[property];\n      } else if (typeof a[property] === 'string' && typeof b[property] === 'string') {\n        // If both values are strings, sort alphabetically\n        return a[property].localeCompare(b[property]);\n      } else {\n        // For other types (e.g., booleans), maintain the original order\n        return 0;\n      }\n    });\n\n    setFilteredData(sortedData);\n  };\n\n  return (\n    <div>\n      <h1>Welcome to Bot Battlr</h1>\n      {!showBotSpecs && <SortBar onSort={handleSort} />}\n      <FilterBar setFilters={applyFilters} />\n      <YourBotArmy\n        enlistedBots={enlistedBots}\n        onDelete={handleRemove}\n        onDischarge={handleDischarge} // Pass the handleDischarge function as a prop\n      />\n      {showBotSpecs ? (\n        <BotSpecs\n          bot={selectedBot}\n          onEnlist={handleEnlist}\n          onBack={handleHideBotSpecs}\n        />\n      ) : (\n        <BotCollection\n          data={filteredData} // Use the filteredData instead of the original data\n          enlistedBots={enlistedBots}\n          onEnlist={handleEnlist}\n          onRemove={handleRemove}\n          onShowSpecs={handleShowBotSpecs}\n          onDischarge={handleDischarge} // Pass the handleDischarge function as a prop\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}