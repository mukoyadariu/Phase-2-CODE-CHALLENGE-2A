{"ast":null,"code":"// server.js\nconst express = require('express');\nconst app = express();\nconst fs = require('fs');\nconst path = require('path');\nconst bodyParser = require('body-parser');\nconst dbPath = path.join(__dirname, 'db.json');\napp.use(bodyParser.json());\n\n// API endpoint to get all bots from db.json\napp.get('/api/bots', (req, res) => {\n  fs.readFile(dbPath, 'utf8', (err, data) => {\n    if (err) {\n      res.status(500).json({\n        error: 'Error reading the database file.'\n      });\n    } else {\n      const bots = JSON.parse(data);\n      res.json(bots);\n    }\n  });\n});\n\n// API endpoint to add a bot to db.json\napp.post('/api/bots', (req, res) => {\n  fs.readFile(dbPath, 'utf8', (err, data) => {\n    if (err) {\n      res.status(500).json({\n        error: 'Error reading the database file.'\n      });\n    } else {\n      const bots = JSON.parse(data);\n      const newBot = req.body;\n\n      // Generate a unique ID for the new bot (You can use a UUID library)\n      // For this example, we'll assume you have a function to generate a unique ID: generateUniqueId()\n      newBot.id = generateUniqueId();\n      bots.push(newBot);\n      fs.writeFile(dbPath, JSON.stringify(bots), 'utf8', err => {\n        if (err) {\n          res.status(500).json({\n            error: 'Error writing to the database file.'\n          });\n        } else {\n          res.json(newBot);\n        }\n      });\n    }\n  });\n});\n\n// API endpoint to delete a bot from db.json\napp.delete('/api/bots/:id', (req, res) => {\n  const botId = req.params.id;\n  fs.readFile(dbPath, 'utf8', (err, data) => {\n    if (err) {\n      res.status(500).json({\n        error: 'Error reading the database file.'\n      });\n    } else {\n      const bots = JSON.parse(data);\n      const filteredBots = bots.filter(bot => bot.id !== botId);\n      fs.writeFile(dbPath, JSON.stringify(filteredBots), 'utf8', err => {\n        if (err) {\n          res.status(500).json({\n            error: 'Error writing to the database file.'\n          });\n        } else {\n          res.json({\n            success: true\n          });\n        }\n      });\n    }\n  });\n});\nconst port = 5000;\napp.listen(port, () => {\n  console.log(`Server is running on http://localhost:${port}`);\n});","map":{"version":3,"names":["express","require","app","fs","path","bodyParser","dbPath","join","__dirname","use","json","get","req","res","readFile","err","data","status","error","bots","JSON","parse","post","newBot","body","id","generateUniqueId","push","writeFile","stringify","delete","botId","params","filteredBots","filter","bot","success","port","listen","console","log"],"sources":["/home/dennis/bot/src/components/Server.js"],"sourcesContent":["// server.js\nconst express = require('express');\nconst app = express();\nconst fs = require('fs');\nconst path = require('path');\nconst bodyParser = require('body-parser');\n\nconst dbPath = path.join(__dirname, 'db.json');\n\napp.use(bodyParser.json());\n\n// API endpoint to get all bots from db.json\napp.get('/api/bots', (req, res) => {\n  fs.readFile(dbPath, 'utf8', (err, data) => {\n    if (err) {\n      res.status(500).json({ error: 'Error reading the database file.' });\n    } else {\n      const bots = JSON.parse(data);\n      res.json(bots);\n    }\n  });\n});\n\n// API endpoint to add a bot to db.json\napp.post('/api/bots', (req, res) => {\n  fs.readFile(dbPath, 'utf8', (err, data) => {\n    if (err) {\n      res.status(500).json({ error: 'Error reading the database file.' });\n    } else {\n      const bots = JSON.parse(data);\n      const newBot = req.body;\n\n      // Generate a unique ID for the new bot (You can use a UUID library)\n      // For this example, we'll assume you have a function to generate a unique ID: generateUniqueId()\n      newBot.id = generateUniqueId();\n\n      bots.push(newBot);\n\n      fs.writeFile(dbPath, JSON.stringify(bots), 'utf8', (err) => {\n        if (err) {\n          res.status(500).json({ error: 'Error writing to the database file.' });\n        } else {\n          res.json(newBot);\n        }\n      });\n    }\n  });\n});\n\n// API endpoint to delete a bot from db.json\napp.delete('/api/bots/:id', (req, res) => {\n  const botId = req.params.id;\n\n  fs.readFile(dbPath, 'utf8', (err, data) => {\n    if (err) {\n      res.status(500).json({ error: 'Error reading the database file.' });\n    } else {\n      const bots = JSON.parse(data);\n      const filteredBots = bots.filter((bot) => bot.id !== botId);\n\n      fs.writeFile(dbPath, JSON.stringify(filteredBots), 'utf8', (err) => {\n        if (err) {\n          res.status(500).json({ error: 'Error writing to the database file.' });\n        } else {\n          res.json({ success: true });\n        }\n      });\n    }\n  });\n});\n\nconst port = 5000;\napp.listen(port, () => {\n  console.log(`Server is running on http://localhost:${port}`);\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}